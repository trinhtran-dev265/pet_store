generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  hashedRt     String?
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userPets     UserPet[]
  cart         Cart?
  orders       Order[]
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  USER
}

model Pet {
  id          String       @id @default(uuid())
  name        String
  type        String
  breed       String
  price       Float        @default(1000)
  image       String?
  description String?
  products    PetProduct[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  userPets    UserPet[]
}

model Product {
  id          String       @id @default(uuid())
  name        String
  price       Float
  image       String?
  description String?
  stock       Int           @default(0)
  pets        PetProduct[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model PetProduct {
  petId     String
  productId String
  pet       Pet      @relation(fields: [petId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([petId, productId])
}

model UserPet {
  id        String   @id @default(uuid())
  userId    String
  petId     String
  user      User     @relation(fields: [userId], references: [id])
  pet       Pet      @relation(fields: [petId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, petId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String        @id @default(uuid())
  cartId    String
  itemId    String         // ID của Pet hoặc Product
  itemType  CartItemType
  quantity  Int            @default(1)
  cart      Cart           @relation(fields: [cartId], references: [id])
}

enum CartItemType {
  PET
  PRODUCT
}

model Order {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  items     OrderItem[]
  status    OrderStatus    @default(PENDING)
  total     Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model OrderItem {
  id        String        @id @default(uuid())
  orderId   String
  itemId    String
  itemType  CartItemType
  quantity  Int           @default(1)
  price     Float
  order     Order         @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}
